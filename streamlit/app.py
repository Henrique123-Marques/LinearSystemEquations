#APRESENTACAO - QUESTAO 6 - LISTA 2
import streamlit as st
import numpy as np
import matplotlib.pyplot as plt

# Configura√ß√£o inicial da p√°gina
st.set_page_config(page_title="Resolu√ß√£o de Sistemas Lineares", layout="wide")

# T√≠tulo da apresenta√ß√£o
st.title("üìò Quest√£o 6 - M√©todo de Gauss-Seidel")

# Menu lateral para navega√ß√£o
st.sidebar.title("üß≠ Navega√ß√£o")
secao = st.sidebar.radio("Escolha a se√ß√£o:", ["Enunciado", "Metodologia Usada", "Resultados"])

# Se√ß√£o 1: Enunciado
if secao == "Enunciado":
    st.header("‚ÑπÔ∏è Enunciado")
    st.markdown("""
    O objetivo desta an√°lise √© resolver o seguinte sistema linear 3x3 utilizando o sofisticado m√©todo iterativo de Gauss-Seidel. 
    Para isso, adotamos como aproxima√ß√£o inicial \( x_0 = (0, 0, 0) \) e estabelecemos uma toler√¢ncia de 0,01, 
    garantindo precis√£o suficiente para as itera√ß√µes:
    """)
    st.latex(r"""
    \begin{cases}
    5x_1 + x_2 + x_3 = 5 \\
    3x_1 + 4x_2 + x_3 = 6 \\
    3x_1 + 3x_2 + 6x_3 = 0
    \end{cases}
    """)

# Se√ß√£o 2: Metodologia Usada
elif secao == "Metodologia Usada": 
    
    st.header("""Breve explicativo do m√©todo iterativo Guass-Seidel: """)
    st.markdown("""O m√©todo iterativo de Gauss-Seidel √© uma t√©cnica num√©rica utilizada para resolver sistemas de equa√ß√µes lineares.
     Desenvolvido no s√©culo XIX, ele leva o nome de dois matem√°ticos alem√£es: Carl Friedrich Gauss, renomado por suas contribui√ß√µes 
     em diversas √°reas da matem√°tica, e Philipp Ludwig von Seidel, que refinou o conceito iterativo. O m√©todo foi formalizado por
      Seidel em 1874, com base em ideias anteriores de Gauss, e serve para encontrar solu√ß√µes aproximadas de sistemas lineares, 
      especialmente √∫til em problemas de grande escala ou quando m√©todos diretos s√£o computacionalmente custosos. Ele funciona
       atualizando iterativamente as vari√°veis do sistema, usando os valores mais recentes calculados em cada passo, at√© que a 
       solu√ß√£o convirja para um resultado aceit√°vel dentro de uma toler√¢ncia definida.""")

    st.header("‚öôÔ∏è Metodologia Usada")
    st.markdown("""
    Na resolu√ß√£o desse problema, foi usado a biblioteca NumPy do Python, para manipula√ß√£o de matrizes e vetores presentes nesse sistema. 
    De modo que fosse possivel organizar o sistema linear em formato matricial, 
    permitindo a aplica√ß√£o fluida do m√©todo de Gauss-Seidel. 

    O processo envolveu a organiza√ß√£o dos par√¢metros para o problema:
    - **Aproxima√ß√£o inicial**: Defini√ß√£o dos valores iniciais x_0 = (0, 0, 0) como ponto de partida;
    - **Itera√ß√µes**: Atualiza√ß√£o sucessiva das vari√°veis (x_1, x_2, x_3) para um n√∫mero m√°ximo definido em 300 itera√ß√µes;
    - **Crit√©rio de parada**: Monitoramento da diferen√ßa entre itera√ß√µes, interrompendo o processo quando a toler√¢ncia de 0.01 foi atingida numa condicional.
    """)

    st.markdown("""A partir do m√©todo de Gauss-Seidel foi feito um processo iterativo para determinar a solu√ß√£o do sistema linear
     definido pelas matrizes `A` e `b`. Inicialmente, a aproxima√ß√£o inicial `x0`, representada por um vetor de zeros `[0, 0, 0]`, 
     foi copiada para o vetor `x`, que armazenar√° os valores atualizados das vari√°veis em cada itera√ß√£o. O algoritmo ent√£o entra
      em um la√ßo que pode se repetir at√© um n√∫mero m√°ximo de itera√ß√µes (`max_iteracoes = 300`), controlando o limite de execu√ß√£o 
      para evitar loops infinitos.

Dentro desse la√ßo, a cada itera√ß√£o `k`, o vetor `x_antigo` √© criado como uma c√≥pia de `x` para preservar os valores da itera√ß√£o anterior, 
permitindo posteriormente a verifica√ß√£o de converg√™ncia. Para cada vari√°vel `x[i]` do sistema (onde `i` varia de 0 a `n-1`, com `n`
 sendo o tamanho do sistema), calcula-se uma soma parcial `soma` dos termos que envolvem as demais vari√°veis `x[j]` (com `j ‚â† i`). 
 Essa soma utiliza os valores mais recentes de `x[j]`, caracter√≠stica distintiva do m√©todo de Gauss-Seidel, que os atualiza imediatamente
  dentro da mesma itera√ß√£o. A nova estimativa para `x[i]` √© ent√£o obtida isolando-a na equa√ß√£o correspondente, usando 
  a f√≥rmula `(b[i] - soma) / A[i,i]`, onde `A[i,i]` √© o elemento da diagonal principal da matriz `A`.

Ap√≥s atualizar todas as vari√°veis em uma itera√ß√£o, verifica-se a converg√™ncia do m√©todo. Isso √© feito calculando a diferen√ßa
 m√°xima absoluta entre os valores atuais de `x` e os valores anteriores armazenados em `x_antigo` (`np.max(np.abs(x - x_antigo))`). 
 Se essa diferen√ßa for menor que a toler√¢ncia pr√©-definida (`tolerancia = 0.01`), o algoritmo considera que a solu√ß√£o convergiu,
  exibe uma mensagem indicando o n√∫mero de itera√ß√µes realizadas (`k+1`) e interrompe o la√ßo com o comando `break`. Caso o n√∫mero m√°ximo
   de itera√ß√µes seja atingido sem que a toler√¢ncia seja satisfeita, o la√ßo termina naturalmente.

Por fim, os valores da solu√ß√£o aproximada s√£o exibidos com duas casas decimais, apresentando as vari√°veis `x1`, `x2` e `x3` como 
resultado do processo iterativo. """)

# Se√ß√£o 3: Resultados
elif secao == "Resultados":
    st.header("üìä Resultados Obtidos")
    st.markdown("""
    Abaixo, exibimos a evolu√ß√£o das solu√ß√µes aproximadas do m√©todo de Gauss-Seidel ao longo das itera√ß√µes, 
    seguida do resultado final ap√≥s a converg√™ncia.
    """)

    # Definindo o sistema e par√¢metros
    A = np.array([[5,1,1],[3,4,1],[3,3,6]], dtype=float)
    b = np.array([5,6,0], dtype=float)
    n = len(b)
    x0 = np.array([0,0,0], dtype=float)
    tolerancia = 0.01
    max_iteracoes = 300

    # Armazenando as solu√ß√µes aproximadas em cada itera√ß√£o
    x = x0.copy()
    historico_x = [x.copy()]  # Lista para armazenar os valores de x em cada itera√ß√£o
    iter_convergencia = max_iteracoes  # Para registrar quando convergiu

    # M√©todo de Gauss-Seidel com hist√≥rico
    for k in range(max_iteracoes):
        x_antigo = x.copy()
        for i in range(n):
            soma = 0
            for j in range(n):
                if j != i:
                    soma += A[i,j] * x[j]
            x[i] = (b[i] - soma) / A[i,i]
        historico_x.append(x.copy())  # Adiciona o novo valor ao hist√≥rico
        
        # Verificando converg√™ncia
        if np.max(np.abs(x - x_antigo)) < tolerancia:
            iter_convergencia = k + 1
            st.success(f"O sistema convergiu ap√≥s {iter_convergencia} itera√ß√µes!")
            break

    # Convertendo o hist√≥rico para um array numpy para facilitar o plot
    historico_x = np.array(historico_x)

    # Criando o gr√°fico de sequ√™ncias de solu√ß√µes aproximadas
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(historico_x[:, 0], label=r"$x_1$", marker="o")
    ax.plot(historico_x[:, 1], label=r"$x_2$", marker="s")
    ax.plot(historico_x[:, 2], label=r"$x_3$", marker="^")
    ax.set_xlabel("Itera√ß√£o")
    ax.set_ylabel("Valor")
    ax.set_title("Evolu√ß√£o das Solu√ß√µes Aproximadas - M√©todo de Gauss-Seidel")
    ax.legend()
    ax.grid(True)

    # Exibindo o gr√°fico no Streamlit
    st.pyplot(fig)

    # Exibindo a solu√ß√£o final
    st.markdown(f"""
    **Solu√ß√£o Final usando Gauss-Seidel:**  
    \( x_1 = {x[0]:.2f} \)  
    \( x_2 = {x[1]:.2f} \)  
    \( x_3 = {x[2]:.2f} \)
    """)

    st.title('Reposit√≥rio da Lista 2 üì¶')
    st.markdown('Github: https://github.com/Henrique123-Marques/LinearSystemEquations')

    st.title('Refer√™ncias Bibliogr√°ficas')
    st.markdown("""
        - GROK. . Dispon√≠vel em: <https://grok.com/>. üîó

        - STREAMLIT. Dispon√≠vel em: <https://docs.streamlit.io/>. üîó

        - BURDEN, Richard L.; FAIRES, J. Douglas. **Numerical Analysis**. 10. ed. Boston: Cengage Learning, 2016. 

        - CORR√äA. Rejane Izabel Lima.; FREITAS. Rafael de Oliveira.; VAZ. Patricia Machado Sebajos. **C√°lculo N√∫merico**. sagah, 2019. 

""")